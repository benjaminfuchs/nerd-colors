#!/usr/bin/python
# --------------------------------------------------------------------------
# Class definition of LedController - utility functions for the LED-strip
#
# Author: Benjamin Fuchs
# License: GPL3
#
# Website: https://github.com/benjaminfuchs/nerd-colors
#
# --------------------------------------------------------------------------

import time, unicornhat

class LedController(object):
  """ Utility functions for the LED-strip """

  # initialize object   ----------------------------------------------------

  def __init__(self,settings):
    """ Constructor """
    self._settings = settings
    self._brightness = settings.get('led.brightness')
    self._color = settings.get('led.color')

    # set time and brightness
    self._set_brightness()
    self._set_color()

    settings.add_settings_listener('led.brightness',self.on_brightness)
    settings.add_settings_listener('led.color',self.on_color)

  # --- brightness change listener   ---------------------------------------

  def on_brightness(self,name,old,new):
    """ process brightness-changes """

    self._settings.log.msg("LedController: on_brightness(%s,%s)" % (old,new))
    self._set_brightness(new)

  # --- set the brightness of the LEDs   -----------------------------------

  def _set_brightness(self,value=None):
    """ Set the brightness of the leds """

    # we only use off and four levels, so scale new appropriately
    if not value is None:
      self._brightness = value
    self._settings.log.msg("LedController: setting brightness to: %d" % self._brightness)
    unicornhat.brightness(self._brightness)
    unicornhat.show()

  # --- color change listener   --------------------------------------------

  def on_color(self,name,old,new):
    """ process color-changes """

    self._settings.log.msg("LedController: on_color(%s,%s)" % (old,new))
    self._set_color(new)

  # --- set the brightness of the LEDs   -----------------------------------

  def _set_color(self,value=None):
    """ Set the brightness of the leds """

    if not value is None:
      self._color = value

    # convert to RGB ...
    (R,G,B) = self._hex_to_rgb(self._color)

    # ... and show
    unicornhat.set_all(R,G,B)
    unicornhat.show()

  def _hex_to_rgb(self,col_hex):
    """Convert a hex colour to an RGB tuple"""

    col_hex = col_hex.lstrip("#")
    return bytearray.fromhex(col_hex)
